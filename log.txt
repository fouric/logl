2016-12-27:

Today marks the beginning of a new era, one where I focus on learning OpenGL until I am confident that I have a reasonable grasp of the API, and then I can get rid of SDL2's graphics drawing interface and just use OpenGL to render things.

I will be using Joey de Vries' excellent learnopengl.com tutorials. I have just finished chapter 5, and am ready to move on to chapter 6: shaders.

Joey starts out by giving a very basic, high-level overview of what shaders are, which are just programs that run on the GPU. Shaders are, unfortunately, written in GLSL, meaning that I will have to either use GLSL or an s-expression-based layer that the #lispgames people cooked up, if such a thing exists.

Shaders apparently always begin with a version declaration of the form "#version 330", then have input and output variables, then uniforms, and then finally the main() function. Each "input variable" to a *vertex* shader in particular (the first shader encountered in the pipeline) is also known as a *vertex attribute*, of which we have (at least, but usally exactly) 16 four-component attributes.

2016-12-28:

axion from #lispgames suggested that I just try to do the things in OpenGL that I wanted to, instead of following a tutorial. He said that "Everything in OpenGL is cake, once you learn the math." I will learn the math!

Chapter 6 is about shaders, while chapter 7 is about textures, which is what I need for my Cave Story clone. I might as well just work my way through the tutorial linearly...

2016-12-31:

Well, time to keep working through the tutorial.

Shaders are small programs that run on the GPU and written in a statically-typed C-like language called GLSL, which has the standard int, float, double, uint, and bool as well as the vectors (vector?) and matrices (matrix?) "container types". Sure, I'll buy that. (keep in mind that this is the third or fourth time I've "learned" (for what is learning without retention?) this material). Vectors look like "vecn" (vector of n floats), ;w

2017-01-01:

Shaders take inputs through variables declared as "in" (which for vertex shaders come directly from vertex attributes and not other shaders) and emit outputs through variables declared as "out". If an "out" variable in one shader stage has the same name and type as an "in" variable in the next stage, then the shader compiler links them together. Else, it fails (sometimes silently).

2017-01-02:

I successfully modify the rectangle-displaying program from chapter 5 such that the vertex shader generates a color and sends it to the fragment shader, which displays it; previously, the color had been hardcoded into the fragment shader itself. Now it's just hardcoded into the vertex shader! A significant improvement.

2017-01-12:

I'm coming back to the project after a several-week hiatus (during which I managed to get virtually nothing of any use done). I go through the section on uniforms. I remember these! Global variables for shaders. I notice the warning that the compiler will *silently* remove unused uniforms from your shader code.

Note: load LOGL with (ql:quickload :logl) and run with (logl:run). I placed the LOGL code in its own package, which might not have been the best idea, now that I think about it.

Part 6.4 of the tutorial has me set the color of the output polygons by setting a uniform that is used in the fragment shader to color them. I remove the hardcoded color and "out" variable from vertex-shader and change the "in vec4 vertex_color" variable in fragment-shader to be "uniform vec4 vertex_shader", saving me a tiny amount of time. I quickly add a local binding around the event loop that contains the handle for the vertex_color variable, and then insert a small chunk of code inside the :idle case of the loop that continuously updates the quad color using the current time and the sin function.

That gave me an idea; what if mercury allowed you to designate parts of a program that you could quickly add code and/or bindings to, to make doing things easier? Similar to vim's marks, but more specialized and intelligent. At the very least, they would have multi-character names, as well as a list of them.

2017-01-13:

After finishing the modifications to my program that cause the quads to transition between green and black for all eternity, I go to the next page in the PDF...only to be confronted with a multicolored triangle that came without any context or explanation. The text that I see after the tri indicates that the PDF elided some material. I go to the web site and quickly find it. This section, titled "More attributes", is about adding per-vertex color information. Joey decided to interleave the color and position data so that all of the information for a single vertex (position and then color) is in chunks. I adjust my *vertices* array to add in the interleaved color data.

2017-01-16:

Whoops, I just realized that I forgot to make a Git commit after finishing that previous section of code. I guess that I'll make one right after I'm done making the modifications that display the rainbow polygons.

I successfully modify my quad code to take vertex colors from vertex attributes (index 1, in particular), with the vertex position and color data being interleaved such that all of the data for a single vertex is consecutive in memory.

6.5 and 6.6 are about making a class to manage your shaders. I don't think I need that sort of abstraction at this point, and I when I do, I can assure you that I will make something more elegant than what could possibly be expressed in C++.

With that, I make a commit and end the chapter. While I'm at it, I remove the logl package that I was putting everything in, for simplicity. This is a sandbox, there's no need to have any sort of namespace isolation.

After moving some of the necessary but non-core code (such as utility macros and shader creation functions) into separate files, I get rid of the line that prints the OpenGL version, just to make the screen a tiny bit tidier and easier to scan. The line is

(format t "opengl version: ~s~%" (gl:get-string :version))

Now, on to the next chapter!

Chapter 7, "Textures", is about...textures. Finally! The main reason that I wanted to learn OpenGL this early was to create a Cave Story clone using that series of video tutorials. One of the first things that Chris did in his series was to draw sprites onto the screen...which requires that you either use SDL2 textures and surfaces or OpenGL textures. I don't want to deal with the former, so OpenGL it is.

Interesting...most textures are two dimensional, but you can also have one and three dimensional textures. I wonder what the use cases are?

Because Joey continues to use a single triangle instead of a quad, I guess that I'll do the same, just to make things slightly easier. The modification is three easy steps: change the vertex data in *vertices*, change the index data in *indices*, and change the :count argument to DRAW-ELEMENTS.

I commit ("changed shape from quad to tri") and continue.